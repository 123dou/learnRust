//ÁªôÂá∫‰∏§‰∏™ ÈùûÁ©∫ ÁöÑÈìæË°®Áî®Êù•Ë°®Á§∫‰∏§‰∏™ÈùûË¥üÁöÑÊï¥Êï∞„ÄÇÂÖ∂‰∏≠ÔºåÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ΩçÊï∞ÊòØÊåâÁÖß ÈÄÜÂ∫è ÁöÑÊñπÂºèÂ≠òÂÇ®ÁöÑÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™ËÉΩÂ≠òÂÇ® ‰∏Ä‰Ωç Êï∞Â≠ó„ÄÇ
//
// Â¶ÇÊûúÔºåÊàë‰ª¨Â∞ÜËøô‰∏§‰∏™Êï∞Áõ∏Âä†Ëµ∑Êù•ÔºåÂàô‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®Êù•Ë°®Á§∫ÂÆÉ‰ª¨ÁöÑÂíå„ÄÇ
//
// ÊÇ®ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞ÈÉΩ‰∏ç‰ºö‰ª• 0 ÂºÄÂ§¥„ÄÇ
//
// Á§∫‰æãÔºö
//
// ËæìÂÖ•Ôºö(2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 0 -> 8
//ÂéüÂõ†Ôºö342 + 465 = 807
//
// Related Topics ÈìæË°® Êï∞Â≠¶
// üëç 5260 üëé 0

use std::option::Option::Some;

use crate::leetcode::editor::cn::ListNode::ListNode;

#[cfg(test)]
pub mod tests {
    use super::*;

    #[test]
    fn test_add_two_numbers() {
        let node = ListNode::new(9);
        let mut list_node = ListNode::new(9);
        list_node.next = Some(Box::new(ListNode::new(9)));
        println!(
            "{:?}",
            Solution::add_two_numbers(Some(Box::new(node)), Some(Box::new(list_node)))
        );
    }
}

struct Solution {}

//leetcode submit region begin(Prohibit modification and deletion)
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
//
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
type List = Option<Box<ListNode>>;

impl Solution {
    pub fn add_two_numbers(l1: List, l2: List) -> List {
        let mut list = ListNode { val: 0, next: None };
        let mut count = 0;
        let mut head1 = &l1;
        let mut head2 = &l2;
        let mut curr = &mut list;
        while let (Some(node1), Some(node2)) = (head1.as_ref(), head2.as_ref()) {
            let mut val = node1.val + node2.val + count;
            if val > 9 {
                count = 1;
                val %= 10;
            } else {
                count = 0;
            }
            curr.next = Some(Box::new(ListNode::new(val)));
            head1 = &node1.next;
            head2 = &node2.next;
            curr = curr.next.as_mut().unwrap();
        }
        let mut head = if let Some(_) = head1 { head1 } else { head2 };
        while let Some(node) = head {
            let mut val = count + node.val;
            if val > 9 {
                val = 0;
            } else {
                count = 0
            }
            curr.next = Some(Box::new(ListNode::new(val)));
            head = &node.next;
            curr = curr.next.as_mut().unwrap();
        }
        if count == 1 {
            curr.next = Some(Box::new(ListNode::new(1)));
        }
        return list.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
